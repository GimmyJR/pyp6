generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String                @id @default(cuid())
  name                 String?
  username             String?               @unique
  email                String                @unique
  emailVerified        DateTime?
  password             String?
  image                String?
  role                 UserRole              @default(USER)
  bio                  String?
  gender               Gender?
  sexualOrientation    SexualOrientation?
  dateOfBirth          DateTime?
  isVerified           Boolean               @default(false)
  activityScore        Float                 @default(0)
  commentCount         Int                   @default(0)
  photoCount           Int                   @default(0)
  totalVotesGiven      Int                   @default(0)
  totalSpent           Float                 @default(0)
  votingStreak         Int                   @default(0)
  averageRatingGiven   Float                 @default(0)
  votingPattern        VotingPattern         @default(NEUTRAL)
  lastActive           DateTime              @default(now())
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  accounts             Account[]
  sessions             Session[]
  comments             Comment[]
  moderatorApplication ModeratorApplication?
  payoutMethods        PayoutMethod[]
  posts                Post[]
  reports              Report[]              @relation("ReportReporter")
  reportedBy           Report[]              @relation("ReportedUser")
  sentTips             Tip[]                 @relation("TipSender")
  transactions         Transaction[]
  votes                Vote[]


  @@index([email])
  @@index([username])
  @@index([role])
  @@index([lastActive])
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id             String         @id @default(cuid())
  caption        String?
  image          String?
  creatorId      String
  approvalStatus ApprovalStatus @default(PENDING)
  averageRating  Float          @default(0)
  totalVotes     Int            @default(0)
  impressions    Int            @default(0)
  shareCount     Int            @default(0)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  comments       Comment[]
  creator        User           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  reports        Report[]
  tips           Tip[]
  votes          Vote[]

  @@index([approvalStatus, createdAt])
  @@index([creatorId])
  @@index([averageRating])
  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Vote {
  id        String   @id @default(cuid())
  rating    Float
  weight    Float    @default(1.0)
  postId    String
  voterId   String
  ipAddress String?
  isOutlier Boolean  @default(false)
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  voter     User     @relation(fields: [voterId], references: [id], onDelete: Cascade)

  @@unique([postId, voterId])
  @@index([postId])
  @@index([voterId])
  @@index([createdAt])
  @@map("votes")
}

model Transaction {
  id          String            @id @default(cuid())
  userId      String
  amount      Float
  type        TransactionType
  status      TransactionStatus @default(PENDING)
  description String?
  reference   String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Tip {
  id        String   @id @default(cuid())
  amount    Float
  senderId  String
  postId    String
  message   String?
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  sender    User     @relation("TipSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@map("tips")
}

model Report {
  id         String       @id @default(cuid())
  reason     String
  details    String?
  status     ReportStatus @default(PENDING)
  postId     String?
  userId     String?
  reporterId String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  post       Post?        @relation(fields: [postId], references: [id], onDelete: Cascade)
  reporter   User         @relation("ReportReporter", fields: [reporterId], references: [id], onDelete: Cascade)
  user       User?        @relation("ReportedUser", fields: [userId], references: [id], onDelete: Cascade)

  @@map("reports")
}

model PayoutMethod {
  id        String   @id @default(cuid())
  userId    String
  type      String
  details   Json
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payout_methods")
}

model Milestone {
  id          String   @id @default(cuid())
  name        String
  description String?
  targetValue Float
  reward      Float
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("milestones")
}

model ContactRequest {
  id        String               @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  status    ContactRequestStatus @default(PENDING)
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt

  @@map("contact_requests")
}

model ModeratorApplication {
  id         String                     @id @default(cuid())
  userId     String                     @unique
  reason     String
  experience String?
  status     ModeratorApplicationStatus @default(PENDING)
  createdAt  DateTime                   @default(now())
  updatedAt  DateTime                   @updatedAt
  user       User                       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("moderator_applications")
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum VotingPattern {
  LOW_VOTER
  NEUTRAL
  HIGH_VOTER
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  TIP_RECEIVED
  TIP_SENT
  MILESTONE_REWARD
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum ReportStatus {
  PENDING
  REVIEWED
  RESOLVED
  DISMISSED
}

enum ContactRequestStatus {
  PENDING
  REVIEWED
  RESOLVED
}

enum ModeratorApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum SexualOrientation {
  STRAIGHT
  GAY
  BISEXUAL
  OTHER
}
